@page "/SignIn"
@using System.ComponentModel.DataAnnotations;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text.Json.Serialization;

@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Antiforgery;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.JSInterop;
@using BlazorServerIdentityInterop.Areas.Identity.Data;

@using RestSharp;
@using RestSharp.Authenticators;


@inject NavigationManager navman;
@inject UserManager<BlazorServerIdentityInteropUser> _userManager
@inject IJSRuntime _jsruntime;
@inject IHttpClientFactory _clientFactory;
@inject IAntiforgery Xsrf;

<AuthorizeView>
    <NotAuthorized Context="NotAuthed">
        <h1 class="text-center">Sign In</h1>
        <div class="container text-center">
            <EditForm EditContext="@_editContext" OnValidSubmit="@ValidSubmit" OnInvalidSubmit="@InvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <hr />
                <div class="container px-1" style="width: 55%; margin-left: 75px;">
                    <div class="form-group row text-right ">
                        <div class="col">
                            <label>
                                Email Address
                                <InputText @bind-Value="Input.Email" />
                            </label>
                        </div>
                    </div>
                    <div class="form-group row text-right">
                        <div class="col">
                            <label>
                                Password
                                <InputText type="password" @bind-Value="Input.Password" />
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col">
                        <label>
                            Remember Me?
                            <InputCheckbox @bind-Value="Input.RememberMe" />
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="col text-right">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitButtonDisabled">Sign in</button>
                    </div>
                    <div class="col text-left">
                        <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
                    </div>
                    @if (showClearErrors)
                    {
                        <div class="col text-left">
                            <button type="button" class="btn btn-info" @onclick="ClearErrors">Clear Errors</button>
                        </div>
                    }

                </div>
            </EditForm>
        </div>
    </NotAuthorized>
    <Authorized Context="Authed">
        @Home()
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] public Task<AuthenticationState> authenticationStateTask { get; set; }
    private string AntiForgeryToken { get; set; }
    private string token { get; set; }
    private string xsrfcookie { get; set; }
    public class InputModel
    {
        [Required] // @using System.ComponentModel.DataAnnotations;
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
        [JsonPropertyName("XSRF-CSRF-TOKEN-FORM")]
        public string xsrf { get; set; }
    }

    private InputModel Input = new InputModel();

    private EditContext _editContext;

    private bool isSubmitButtonDisabled { get; set;  }

    private bool showClearErrors { get; set; }

    public HttpResponseMessage OnGetResponse { get; set; } = new HttpResponseMessage();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _editContext = new EditContext(Input);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            #region Interop
            var interop = new Interop(_jsruntime);
            //AntiForgeryToken = await interop.GetElementByName("__RequestVerificationToken");
            #endregion
        }

        await base.OnAfterRenderAsync(firstRender);
        return;
    }

    public async void ValidSubmit()
    {
        // This does work, but is unsupported in Blazor
        var user = _editContext.Validate() && await ServerValidate(_editContext);
        if (!user)
        {
            // invalid user supplied;
            showClearErrors = true;
            isSubmitButtonDisabled = true;
            return;
        }

#if Interop
        // This action never reports failure, so that is why it didn't go into ServerValidate.
        var fields = new
        {
        __RequestVerificationToken = AntiForgeryToken
        ,
        email = Input.Email,
        password = Input.Password,
        remember = Input.RememberMe,
        returnurl = "/SignIn"
        };
        var interop = new Interop(_jsruntime);
        await interop.SubmitForm("Identity/Account/Login", fields);
        HttpResponseMessage response = new HttpResponseMessage();

        if (!response.IsSuccessStatusCode)
        {
        return;
        }
#endif

#if RestSharp
        // First get the form containing tokens
        string uri = navman.BaseUri + $"Identity/Account/Login?Email=" + Input.Email + "&Password=" + Input.Password + "&RememberMe=" + Input.RememberMe.ToString();
        var getClient = new RestClient(uri);
        var getRequest = new RestRequest(Method.GET);
        IRestResponse getResponse = getClient.Execute(getRequest);

        var getHeaders = getResponse.Headers.ToList();
        var getCookies = getResponse.Cookies.ToList();
        var antiCookie = getCookies.Find(x => x.Name.StartsWith(".AspNetCore.Antiforgery."));
        var xsrfCookie = getCookies.Find(x => x.Name.Equals("XSRF-TOKEN"));
        //Set up
        //var interop = new Interop(_jsruntime);
        //var xscookie = await interop.GetElementByName("BDrvt");

        var postClient = new RestClient(uri);
        //postClient.Authenticator = new HttpBasicAuthenticator(Input.Email, Input.Password);

        var postRequest = new RestRequest(Method.POST);
        //postRequest.AddHeader("X-CSRF-TOKEN-HEADER", xsrfcookie);
        postRequest.AddHeader("X-CSRF-TOKEN-HEADER", xsrfCookie.Value);
        //request.AddHeader("Authorization", "Basic dGVzdDAxQGVtYWlsOlRpZ2VyMTIzIQ==");
        //postRequest.AddHeader("Cookie", ".AspNetCore.Antiforgery.ulueaY49otY=xscookie");
        postRequest.AddCookie(antiCookie.Name, antiCookie.Value);
        postRequest.AddCookie("XSRF-TOKEN", xsrfCookie.Value);
        IRestResponse response = postClient.Execute(postRequest);
        if (!response.IsSuccessful)
            return;
        var authCookie = response.Cookies.ToList().Find(x => x.Name.Equals(".AspNetCore.Identity.Application"));
        var blazorJSR = new Interop(_jsruntime);

        await blazorJSR.SetCookie(authCookie.Name, authCookie.Value, 14);
        /// Check out response
        navman.NavigateTo("/Index", true);
#endif
    }

    public void InvalidSubmit()
    {
        _editContext = new EditContext(Input);
        return;
    }

    public void ClearErrors()
    {
        _editContext = new EditContext(Input);
        isSubmitButtonDisabled = false;
        showClearErrors = false;

    }
    public void Cancel()
    {
        navman.NavigateTo("/Index");
    }

    // Methods called from Razor code must return an object.

    /// <summary>
    /// Methods called from Razor code must return an object, so Cancel() can't be used.
    /// So there is Home() instead, and it calls Cancel()
    /// </summary>
    /// <returns></returns>
    public string Home()
    {
        Cancel();
        return string.Empty;
    }

    /// <summary>
    /// Runs a series of test on the server and returns pass fail.
    /// </summary>
    /// <param name="editContext"></param>
    /// <returns></returns>
    private async Task<bool> ServerValidate(EditContext editContext)
    {
        // local property of the model
        var input = (InputModel)editContext.Model;

        // local error store
        var validationErrors = new ValidationMessageStore(editContext);

        // First test
        var user = await _userManager.FindByNameAsync(Input.Email);
        if (user == null)
        {
            var field = new FieldIdentifier(input, nameof(Input.Email));
            validationErrors.Add(field, "User name does not exist, try again");
            editContext.NotifyValidationStateChanged();
            return false;
        }

        //Second test
        var result = await _userManager.CheckPasswordAsync(user, Input.Password);
        if (!result)
        {
            var field = new FieldIdentifier(input, nameof(Input.Email));
            validationErrors.Add(field, "Password incorrect");
            editContext.NotifyValidationStateChanged();
            return false;
        }

        return true;
    }
}
